#!/usr/bin/env python

"""
deb_reboot

Check if reboot is needed or not on Debian host
Made by Pierre Mavro / Deimosfr <deimos@deimos.fr>
"""

#############################################################

# Load modules
import argparse
import os
import sys
import glob
import re

def Debug(debug_text):
    """Debug function"""
    if debug_mode == True:
        print debug_text

def args():
    """Command line parameters"""
    # Define globla vars
    global quiet_mode, debug_mode, show_mode;

    # Main informations
    parser = argparse.ArgumentParser(description="Check if reboot is required on a Debian machine")
    # Default args
    parser.add_argument('-q', '--quiet', action='store_true', default=False, help='quiet mode, only return code (0 noting to do | 2 reboot required)')
    parser.add_argument('-s', '--show', action='store_true', default=False, help='show full list of packages that request a reboot')
    parser.add_argument('-v', '--version', action='version', version='v0.1 Licence GPLv2', help='Version 0.1')
    parser.add_argument('-d', '--debug', action='store_true', default=False, help='debug mode')

    result = parser.parse_args()

    # Set debug to True if requested by command line
    if (result.debug == True):
        debug_mode=True
    else:
        debug_mode=False

    # Quiet mode ?
    if (result.quiet == True):
        quiet_mode=True
    else:
        quiet_mode=False

    # Quiet mode ?
    if (result.show == True):
        show_mode=True
    else:
        show_mode=False

    # Send debug informations
    Debug('[+] Command line args')
    Debug('Command line : ' + str(sys.argv))
    Debug('Command line vars : ' + str(parser.parse_args()))

def RebootRequired(uptime):
    """
    Parse postinstall files to find reboot word
    Stat file : Time of last modification, seconds since Epoch
    Compare with the current boot time
    """
    Debug("\n[+] Patterns found")
    show_label=0
    reboot_needed=0
    for infile in glob.glob(os.path.join( '/var/lib/dpkg/info/*.postinst')):
        for line in open(infile):
            if "reboot" in line:
                fmtime = os.path.getmtime(infile)
                Debug('-> File ' + infile + " (mtime: " + str(fmtime) + ") pattern 'reboot' found :\n" + line.rstrip())
                if (fmtime >= uptime):
                    # Reboot required
                    Debug('System is requiering a reboot')
                    if (show_mode == True):
                        if (show_label == 0):
                            print 'The following packages are requesting a reboot :'
                        m = re.search('(\w+)\.postinst$', infile)
                        print m.group(1)
                        show_label += 1
                        reboot_needed += 1
                    else:
                        if (quiet_mode == False):
                            print 'System is requiering a reboot'
                        exit(2)
                break
    # Reboot not required
    if (reboot_needed == 0):
        print "Reboot not required"
        exit(0)

def BooTime():
    """ Get boot time / uptime in seconds """
    for line in open('/proc/stat', 'r'):
        if line.startswith('btime'):
            boottime = int(line.split()[1])
            Debug("\n[+] Boot time\nbtime from /proc/stat : " + str(boottime))
            return boottime

def main():
    """Main function that launch all of them"""
    # Set args and get debug mode
    args()
    # Get current boot
    uptime = BooTime()
    # Check if reboot is required
    RebootRequired(uptime)

if __name__ == "__main__":
    main()

